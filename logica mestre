#include <stdio.h>  // Para entrada e saída (printf, scanf)
#include <string.h> // Para manipulação de strings (strcpy)

// --- Estrutura para representar uma Carta ---
// Agrupa todos os atributos de uma carta para melhor organização.
struct Carta {
    char estado;
    char codigo[5];
    char nomeCidade[50];
    int populacao;
    float area;
    float pib;
    int pontosTuristicos;
    float densidadePopulacional;
    float pibPerCapita;
};

// Função para exibir o menu de atributos disponíveis
void exibirMenuAtributos(int atributoJaEscolhido) {
    printf("\n--- Escolha um atributo para comparar ---\n");
    if (atributoJaEscolhido != 1) printf("1. Populacao\n");
    if (atributoJaEscolhido != 2) printf("2. Area\n");
    if (atributoJaEscolhido != 3) printf("3. PIB\n");
    if (atributoJaEscolhido != 4) printf("4. Numero de Pontos Turisticos\n");
    if (atributoJaEscolhido != 5) printf("5. Densidade Populacional\n");
    if (atributoJaEscolhido != 6) printf("6. PIB per Capita\n");
    printf("Escolha sua opcao: ");
}

// Função para obter o valor de um atributo específico de uma carta
// Isso evita repetição de código no switch
float getAtributoValor(struct Carta carta, int escolhaAtributo) {
    switch (escolhaAtributo) {
        case 1: return (float)carta.populacao;
        case 2: return carta.area;
        case 3: return carta.pib;
        case 4: return (float)carta.pontosTuristicos;
        case 5: return carta.densidadePopulacional;
        case 6: return carta.pibPerCapita;
        default: return 0.0; // Valor padrão para opção inválida
    }
}

// Função para obter o nome de um atributo
const char* getAtributoNome(int escolhaAtributo) {
    switch (escolhaAtributo) {
        case 1: return "Populacao";
        case 2: return "Area";
        case 3: return "PIB";
        case 4: return "Numero de Pontos Turisticos";
        case 5: return "Densidade Populacional";
        case 6: return "PIB per Capita";
        default: return "Desconhecido";
    }
}

int main() {
    // --- Declaração e inicialização das duas cartas ---
    // As cartas estão pré-definidas para focar na lógica de comparação.
    struct Carta carta1 = {
        'S', "SP01", "Sao Paulo", 12325000, 1521.11, 699.28, 50, 0.0, 0.0
    };

    struct Carta carta2 = {
        'R', "RJ02", "Rio de Janeiro", 6748000, 1200.25, 300.50, 30, 0.0, 0.0
    };

    // --- Cálculo da Densidade Populacional e PIB per Capita para Carta 1 ---
    if (carta1.area > 0) {
        carta1.densidadePopulacional = (float)carta1.populacao / carta1.area;
    } else {
        carta1.densidadePopulacional = 0.0;
    }

    if (carta1.populacao > 0) {
        carta1.pibPerCapita = (carta1.pib * 1000000000.0) / (float)carta1.populacao;
    } else {
        carta1.pibPerCapita = 0.0;
    }

    // --- Cálculo da Densidade Populacional e PIB per Capita para Carta 2 ---
    if (carta2.area > 0) {
        carta2.densidadePopulacional = (float)carta2.populacao / carta2.area;
    } else {
        carta2.densidadePopulacional = 0.0;
    }

    if (carta2.populacao > 0) {
        carta2.pibPerCapita = (carta2.pib * 1000000000.0) / (float)carta2.populacao;
    } else {
        carta2.pibPerCapita = 0.0;
    }

    // --- Exibição das Informações das Cartas (para referência do usuário) ---
    printf("--- Informacoes das Cartas Disponiveis ---\n");

    printf("\nCarta 1: %s (%c)\n", carta1.nomeCidade, carta1.estado);
    printf("  Populacao: %d\n", carta1.populacao);
    printf("  Area: %.2f km^2\n", carta1.area);
    printf("  PIB: %.2f bilhoes de reais\n", carta1.pib);
    printf("  Pontos Turisticos: %d\n", carta1.pontosTuristicos);
    printf("  Densidade Populacional: %.2f hab/km^2\n", carta1.densidadePopulacional);
    printf("  PIB per Capita: %.2f reais\n", carta1.pibPerCapita);

    printf("\nCarta 2: %s (%c)\n", carta2.nomeCidade, carta2.estado);
    printf("  Populacao: %d\n", carta2.populacao);
    printf("  Area: %.2f km^2\n", carta2.area);
    printf("  PIB: %.2f bilhoes de reais\n", carta2.pib);
    printf("  Pontos Turisticos: %d\n", carta2.pontosTuristicos);
    printf("  Densidade Populacional: %.2f hab/km^2\n", carta2.densidadePopulacional);
    printf("  PIB per Capita: %.2f reais\n", carta2.pibPerCapita);

    // --- Variáveis para as escolhas do usuário e somas ---
    int escolha1, escolha2;
    float somaAtributos1 = 0.0;
    float somaAtributos2 = 0.0;

    // --- Escolha do Primeiro Atributo ---
    int entradaValida1 = 0;
    while (!entradaValida1) {
        exibirMenuAtributos(0); // 0 indica que nenhum atributo foi escolhido ainda
        scanf("%d", &escolha1);
        // Limpa o buffer de entrada
        int c;
        while ((c = getchar()) != '\n' && c != EOF);

        if (escolha1 >= 1 && escolha1 <= 6) {
            entradaValida1 = 1;
        } else {
            printf("Opcao invalida para o primeiro atributo. Tente novamente.\n");
        }
    }

    // --- Escolha do Segundo Atributo (Dinâmico) ---
    int entradaValida2 = 0;
    while (!entradaValida2) {
        printf("\nVoce escolheu: %s para o primeiro atributo.\n", getAtributoNome(escolha1));
        exibirMenuAtributos(escolha1); // Passa o primeiro atributo escolhido para não exibi-lo novamente
        scanf("%d", &escolha2);
        // Limpa o buffer de entrada
        int c;
        while ((c = getchar()) != '\n' && c != EOF);

        if (escolha2 >= 1 && escolha2 <= 6 && escolha2 != escolha1) {
            entradaValida2 = 1;
        } else {
            if (escolha2 == escolha1) {
                printf("Atributo ja escolhido. Por favor, selecione um atributo diferente.\n");
            } else {
                printf("Opcao invalida para o segundo atributo. Tente novamente.\n");
            }
        }
    }

    // --- Processamento e Exibição da Comparação ---
    printf("\n--- Comparacao da Rodada ---\n");
    printf("Atributo 1: %s\n", getAtributoNome(escolha1));
    printf("Atributo 2: %s\n", getAtributoNome(escolha2));

    // Comparar o primeiro atributo
    float valor1_attr1 = getAtributoValor(carta1, escolha1);
    float valor2_attr1 = getAtributoValor(carta2, escolha1);

    printf("\n%s (%s): %.2f | %s (%s): %.2f\n",
           carta1.nomeCidade, getAtributoNome(escolha1), valor1_attr1,
           carta2.nomeCidade, getAtributoNome(escolha1), valor2_attr1);

    // Regra para o primeiro atributo
    if (escolha1 == 5) { // Densidade Demográfica - menor valor vence
        if (valor1_attr1 < valor2_attr1) {
            somaAtributos1 += 1.0; // Carta 1 ganha 1 ponto
            printf("Carta 1 (%s) vence no atributo %s.\n", carta1.nomeCidade, getAtributoNome(escolha1));
        } else if (valor2_attr1 < valor1_attr1) {
            somaAtributos2 += 1.0; // Carta 2 ganha 1 ponto
            printf("Carta 2 (%s) vence no atributo %s.\n", carta2.nomeCidade, getAtributoNome(escolha1));
        } else {
            printf("Empate no atributo %s.\n", getAtributoNome(escolha1));
        }
    } else { // Outros atributos - maior valor vence
        if (valor1_attr1 > valor2_attr1) {
            somaAtributos1 += 1.0;
            printf("Carta 1 (%s) vence no atributo %s.\n", carta1.nomeCidade, getAtributoNome(escolha1));
        } else if (valor2_attr1 > valor1_attr1) {
            somaAtributos2 += 1.0;
            printf("Carta 2 (%s) vence no atributo %s.\n", carta2.nomeCidade, getAtributoNome(escolha1));
        } else {
            printf("Empate no atributo %s.\n", getAtributoNome(escolha1));
        }
    }

    // Comparar o segundo atributo
    float valor1_attr2 = getAtributoValor(carta1, escolha2);
    float valor2_attr2 = getAtributoValor(carta2, escolha2);

    printf("\n%s (%s): %.2f | %s (%s): %.2f\n",
           carta1.nomeCidade, getAtributoNome(escolha2), valor1_attr2,
           carta2.nomeCidade, getAtributoNome(escolha2), valor2_attr2);

    // Regra para o segundo atributo
    if (escolha2 == 5) { // Densidade Demográfica - menor valor vence
        if (valor1_attr2 < valor2_attr2) {
            somaAtributos1 += 1.0;
            printf("Carta 1 (%s) vence no atributo %s.\n", carta1.nomeCidade, getAtributoNome(escolha2));
        } else if (valor2_attr2 < valor1_attr2) {
            somaAtributos2 += 1.0;
            printf("Carta 2 (%s) vence no atributo %s.\n", carta2.nomeCidade, getAtributoNome(escolha2));
        } else {
            printf("Empate no atributo %s.\n", getAtributoNome(escolha2));
        }
    } else { // Outros atributos - maior valor vence
        if (valor1_attr2 > valor2_attr2) {
            somaAtributos1 += 1.0;
            printf("Carta 1 (%s) vence no atributo %s.\n", carta1.nomeCidade, getAtributoNome(escolha2));
        } else if (valor2_attr2 > valor1_attr2) {
            somaAtributos2 += 1.0;
            printf("Carta 2 (%s) vence no atributo %s.\n", carta2.nomeCidade, getAtributoNome(escolha2));
        } else {
            printf("Empate no atributo %s.\n", getAtributoNome(escolha2));
        }
    }

    // --- Resultado Final da Rodada ---
    printf("\n--- Resultado Final da Rodada ---\n");
    printf("Soma de pontos para %s: %.0f\n", carta1.nomeCidade, somaAtributos1);
    printf("Soma de pontos para %s: %.0f\n", carta2.nomeCidade, somaAtributos2);

    if (somaAtributos1 > somaAtributos2) {
        printf("Vencedor da rodada: Carta 1 (%s)!\n", carta1.nomeCidade);
    } else if (somaAtributos2 > somaAtributos1) {
        printf("Vencedor da rodada: Carta 2 (%s)!\n", carta2.nomeCidade);
    } else {
        printf("A rodada terminou em Empate!\n");
    }

    return 0; // Indica que o programa foi executado com sucesso
}
